#!/bin/bash

# Run tests
#
# Usage: run

# Get script directory
sd=$(dirname -- "$(readlink -f -- "$BASH_SOURCE")")

# Get repository root
root=$(realpath $sd/..)

# Tester application path
tester=$root/bin/mongatest

# Go to input folder so that file names
# are merely numbers
pushd $sd/cases/input > /dev/null

# logdir is the directory where logs are
# going to be saved
logdir=$root/bin/tests

# Make logdir if nonexistent
mkdir -p $logdir

# tmpdir is the directory where all the
# outputs will be written to so that
# they can be compared with the expected
# outputs
tmpdir=$(mktemp -d)

# failedcnt is the number of tests that
# have failed
failedcnt=0

# skippedcnt is the number of tests that
# have been skipped
skippedcnt=0

# colours useful for printing
LGREEN='\033[1;32m'
LRED='\033[1;31m'
YELLOW='\033[0;33m'
NOCOLOR='\033[0m'

# For every file in cases/input ...
for file in $($sd/list); do

	# Notify that test will be run...
	printf "[ TEST ] Running test #%s... " "$file"

	# Run test, saving the output in the temporary directory
	cat $file | $tester > $tmpdir/$file

	if [[ -f ../output/$file ]] ; then
		# Compare the expected and obtained outputs and
		# redirect the diff analysis to the log directory
		diff $tmpdir/$file ../output/$file > $logdir/$file

		# Check if diff returned 0 (i.e. the files are identical)
		# or else, the files are different
		if [ $? -eq 0 ] ; then
			printf $LGREEN"PASSED"
		else
			printf $LRED"FAILED"

			# Increase the count of failed tests
			((++failedcnt))
		fi
		printf $NOCOLOR"\n";
	else
		# Skip test case because output is missing 
		printf $YELLOW"SKIPPED"$NOCOLOR" (missing output)\n"

		((++skippedcnt))
	fi

done

# Remove the temporary directory
rm -rf $tmpdir

# pop directory
popd > /dev/null

# Check if any tests failed and print an appropriate
# message to summarize the test results
if [ $failedcnt -eq 0 ] ; then
	printf "[ TEST ] "$LGREEN"All tests passed"
else
	printf "[ TEST ] "$LRED"$failedcnt test(s) failed"
fi
printf $NOCOLOR"\n"

# Check if any tests were skipped and print an appopriate
# message to warn the user
if [ $skippedcnt -ne 0 ] ; then
	printf "[ TEST ] "$YELLOW"$skippedcnt test(s) skipped"
	printf $NOCOLOR"\n"
fi

# Exit the script with 0 if no tests failed (i.e. success)
# or else, if at least one failed (i.e. failed)
exit $failedcnt
